{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","Grid","container","spacing","map","val","item","xs","Paper","component","gutterBottom","title","subtitle","Table","size","TableHead","TableRow","TableCell","TableBody","name","orders","revenue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,sOCuF5BC,MAtEf,WAcE,OACE,yBAAKC,UAAU,OACd,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACpB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAASC,MAAM,UAAUC,aAAW,QACnD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,aAGA,kBAACC,EAAA,EAAD,CAAQJ,MAAM,WAAd,WAGJ,kBAACK,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GA1BT,CACZ,CAAC,MAAQ,UAAU,SAAW,WAC9B,CAAC,MAAQ,QAAQ,SAAW,QAC5B,CAAC,MAAQ,cAAc,SAAW,MAClC,CAAC,MAAQ,SAAS,SAAW,QAyBvBC,KAAI,SAAAC,GACR,OAAQ,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,GAAG,kBAACC,EAAA,EAAD,KACxB,kBAACV,EAAA,EAAD,CAAYW,UAAU,KAAKV,QAAQ,KAAKH,MAAM,UAAUc,cAAY,GACnEL,EAAIM,OAET,kBAACb,EAAA,EAAD,CAAYW,UAAU,IAAIV,QAAQ,MAAMM,EAAIO,gBAO9C,kBAACJ,EAAA,EAAD,KACA,kBAACV,EAAA,EAAD,CAAYW,UAAU,KAAKV,QAAQ,KAAKH,MAAM,UAAUc,cAAY,GAApE,UAGI,kBAACG,EAAA,EAAD,CAAOC,KAAK,SACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,sBAGJ,kBAACC,EAAA,EAAD,KA/CY,CAClB,CAAC,KAAO,oBAAqB,OAAS,GAAI,QAAU,SACpD,CAAC,KAAO,aAAc,OAAS,GAAI,QAAU,UAC7C,CAAC,KAAO,YAAa,OAAS,GAAI,QAAU,SAC5C,CAAC,KAAO,MAAO,OAAS,GAAI,QAAU,SACtC,CAAC,KAAO,YAAa,OAAS,GAAI,QAAU,WA2CxBd,KAAI,SAAAC,GACd,OAAO,kBAACW,EAAA,EAAD,KACX,kBAACC,EAAA,EAAD,KAAYZ,EAAIc,MACd,kBAACF,EAAA,EAAD,KAAYZ,EAAIe,QAChB,kBAACH,EAAA,EAAD,KAAYZ,EAAIgB,kBChENC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e262fb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nfunction App() {\n  const boxes = [\n    {\"title\":\"Revenue\",\"subtitle\":\"RM 3000\"},\n    {\"title\":\"Users\",\"subtitle\":\"2000\"},\n    {\"title\":\"Restaurants\",\"subtitle\":\"15\"},\n    {\"title\":\"Riders\",\"subtitle\":\"120\"}\n]\nconst restaurants = [\n  {\"name\":\"Uncle Bob Chicken\", \"orders\":15, \"revenue\":\"RM300\"},\n  {\"name\":\"Mc Donalds\", \"orders\":20, \"revenue\":\"RM1500\"},\n  {\"name\":\"Pizza Hut\", \"orders\":15, \"revenue\":\"RM200\"},\n  {\"name\":\"A&W\", \"orders\":15, \"revenue\":\"RM300\"},\n  {\"name\":\"Nuin Cafe\", \"orders\":15, \"revenue\":\"RM3000\"}\n]\n  return (\n    <div className=\"App\">\n     <AppBar position=\"static\">\n  <Toolbar>\n    <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n      <MenuIcon />\n    </IconButton>\n    <Typography variant=\"h6\" >\n      Dashboard\n    </Typography>\n    <Button color=\"inherit\">Login</Button>\n  </Toolbar>\n</AppBar>\n<Grid container spacing={3}>\n\n  {\n    boxes.map(val=>{\n      return  <Grid item xs={3}><Paper >\n        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n        {val.title}\n      </Typography>\n    <Typography component=\"p\" variant=\"h4\">{val.subtitle}</Typography>\n      </Paper>\n      </Grid>\n    })\n  }\n\n  </Grid>\n  <Paper>\n  <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n       Orders\n      </Typography>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Orders</TableCell>\n            <TableCell>Sale Amount</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>{\n          restaurants.map(val=> \n          { return <TableRow>\n        <TableCell>{val.name}</TableCell>\n          <TableCell>{val.orders}</TableCell>\n          <TableCell>{val.revenue}</TableCell>\n          </TableRow>\n          })\n}\n          </TableBody>\n          </Table>\n  </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}